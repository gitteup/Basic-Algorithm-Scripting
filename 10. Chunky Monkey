//NOTES: #1

// Write a function that splits an array (first argument) into groups the length of 
// size (second argument) and returns them as a two-dimensional array.

// #1

function chunkArrayInGroups(arr, size) {

 var temp = [];
  var result = [];

  for (var a = 0; a < arr.length; a++) {
    if (a % size !== size - 1)
      temp.push(arr[a]);
    else {
      temp.push(arr[a]);
      result.push(temp);
      temp = [];
    }
  }

  if (temp.length !== 0)
    result.push(temp);
  return result;
}
chunkArrayInGroups(["a", "b", "c", "d"], 2);

// #2

function chunkArrayInGroups(arr, size) {
  // Break it up
  // It's already broken :(
  arr = arr.slice();
  var arr2 = [];
  for(var i = 0, len = arr.length; i < len; i+=size) {
    arr2.push(arr.slice(0, size));
    arr = arr.slice(size);
  }
  return arr2;
}
chunkArrayInGroups(["a", "b", "c", "d"], 2);


// #3

function chunkArrayInGroups(arr, size) {
  // Break it up.
  var newArr = [];
  var i = 0;

  while (i < arr.length) {
    newArr.push(arr.slice(i, i+size));
    i += size;
  }
  return newArr;
}
chunkArrayInGroups(["a", "b", "c", "d"], 2);

// #4

const chunkArrayInGroups = (xs, s) => xs.length === 0 ? [] : [xs.slice(0, s)].concat(chunkArrayInGroups(xs.slice(s), s));

chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4);



