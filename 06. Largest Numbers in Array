//NOTES #1:

//Return an array consisting of the largest number from each provided sub-array

//#1 (FOR LOOP)

function largestOfFour(arr) {
  
   var largestNumber = [0,0,0,0];
   
   for(var i = 0; i < arr.length; i++) {
    for(var j = 0; j < arr[i].length; j++) {
       if(arr[i][j] > largestNumber[i]) {         
          largestNumber[i] = arr[i][j];
        }
    }
 }
 return largestNumber;
}
largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);

//NOTES: #2

// The MAP() method creates a new array with the results of calling a provided function on every element in this array. 
// Using map will call a provided callback function once for each element in an array, in order, 
// and constructs a new array from the results.

// The REDUCE() method applies a function against an accumulator and each value of the array to reduce it to a single value.

// The ternary operator (?) is the only JavaScript operator that takes three operands. 
// This operator is used as a shortcut for the (IF) statement.

//***************************************************

// (currentLargestNumber > previousLargestNumber) ?
// currentLargestNumber : previousLargestNumber;

// =

// if (currentLargestNumber > previousLargestNumber == true) {
//    return currentLargestNumber;
// } else {
//    return previousLargestNumber;
// }

//***************************************************

//#2 (MAP & REDUCE)

function largestOfFour(mainArray) {

  return mainArray.map(function (subArray){
    return subArray.reduce(function (previousLargestNumber, currentLargestNumber) {
      return (currentLargestNumber > previousLargestNumber) ? 
       currentLargestNumber : previousLargestNumber;
    }, 0);
  });
}
largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);


//NOTES #3

//console.log(Math.max(4,5,1,3)); // logs 5

//#3 (Math.max)

function largestOfFour(mainArray) {
  return mainArray.map(function(subArray) {
    return Math.max.apply(null, subArray);
  });
}
largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);
